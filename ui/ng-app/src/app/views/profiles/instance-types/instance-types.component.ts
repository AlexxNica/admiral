import { Component, ViewChild, OnInit } from '@angular/core';
import { Links } from '../../../utils/links';
import { DocumentService } from '../../../utils/document.service';
import { Utils } from '../../../utils/utils';
import * as I18n from 'i18next';
import { GridViewComponent } from '../../../components/grid-view/grid-view.component';

@Component({
  selector: 'instance-types',
  templateUrl: './instance-types.component.html',
  styleUrls: ['./instance-types.component.scss']
})
export class InstanceTypesComponent implements OnInit {

  serviceEndpoint = Links.INSTANCE_TYPES;

  constructor(private service: DocumentService) { }

  selectedItem: any;
  instanceTypeToDelete: any;
  deleteConfirmationAlert: string;

  @ViewChild('gridView') gridView:GridViewComponent;

  ngOnInit() {
  }

  deleteInstanceType(event, instanceType) {
    this.instanceTypeToDelete = instanceType;
    event.stopPropagation();
    // clear selection
    this.selectedItem = null;

    return false; // prevents navigation
  }

  get deleteConfirmationDescription(): string {
    return this.instanceTypeToDelete && this.instanceTypeToDelete.name;
  }

  deleteConfirmed() {
    this.service.delete(this.instanceTypeToDelete.documentSelfLink)
        .then(result => {
          this.instanceTypeToDelete = null;
          this.gridView.refresh();
        })
        .catch(err => {
          this.deleteConfirmationAlert = Utils.getErrorMessage(err)._generic;
        });
  }

  deleteCanceled() {
    this.instanceTypeToDelete = null;
  }

  // TODO: handle extensibility cases for adding custom addapters and icons
  getAdapterIcon(item) {
    if (item.endpointType != null) {
      return 'assets/images/compute/endpoints/' + item.endpointType + '.png';
    } else {
      // use an autogenerated icon
      return '/container-image-icons?container-image=' + item.documentSelfLink;
    }
  }

  getFlavorsCount(item) {
    return Object.keys(item.instanceTypeMapping).length;
  }

  selectItem($event, item) {
    $event.stopPropagation();

    if (this.isItemSelected(item)) {
      // clear selection
      this.selectedItem = null;
    } else {
      this.selectedItem = item;
    }
  }

  isItemSelected(item: any) {
    return item === this.selectedItem;
  }
}
